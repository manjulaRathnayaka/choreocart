openapi: 3.0.0
info:
  title: ChoreoCart BFF API
  description: Backend for Frontend API for the ChoreoCart application
  version: 1.0.0
servers:
  - url: /api
paths:
  /products:
    get:
      summary: Get all products
      description: Retrieves the list of all available products from the product service
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieves a specific product by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Numeric ID of the product to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/search:
    get:
      summary: Search products
      description: Search products by name or category
      parameters:
        - name: query
          in: query
          schema:
            type: string
          description: Search term for product name
        - name: category
          in: query
          schema:
            type: string
          description: Filter products by category
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cart:
    get:
      summary: Get cart contents
      description: Retrieves the current contents of the shopping cart
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add item to cart
      description: Adds a new product to the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '201':
          description: Item added successfully
        '400':
          description: Invalid request body or missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Clear cart
      description: Removes all items from the shopping cart
      responses:
        '200':
          description: Cart cleared successfully
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /checkout:
    post:
      summary: Process checkout
      description: Creates an order from the current cart and clears the cart
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request (e.g., empty cart)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders:
    get:
      summary: Get all orders
      description: Retrieves all orders placed
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{orderId}:
    get:
      summary: Get order by ID
      description: Retrieves a specific order by its ID
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: ID of the order to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update order status
      description: Updates the status of a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: ID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, completed, cancelled]
              required:
                - status
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request (invalid status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the product
        name:
          type: string
          description: Name of the product
        price:
          type: number
          format: float
          description: Price of the product
        description:
          type: string
          description: Detailed description of the product
        category:
          type: string
          description: Product category
      required:
        - id
        - name
        - price
    CartItem:
      type: object
      properties:
        id:
          type: integer
          description: Product ID
        name:
          type: string
          description: Product name
        price:
          type: number
          format: float
          description: Product price
      required:
        - id
        - name
        - price
    Order:
      type: object
      properties:
        id:
          type: string
          description: Order unique identifier
        items:
          type: array
          description: Products in the order
          items:
            $ref: '#/components/schemas/CartItem'
        totalAmount:
          type: number
          format: float
          description: Total order amount
        status:
          type: string
          description: Current order status
          enum: [pending, completed, cancelled]
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last order update timestamp
      required:
        - id
        - items
        - totalAmount
        - status
        - createdAt
        - updatedAt
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error